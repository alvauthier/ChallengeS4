basePath: /
definitions:
  controller.ArtistPatchInput:
    properties:
      name:
        type: string
    type: object
  controller.CategoryPatchInput:
    properties:
      name:
        type: string
    type: object
  controller.CreatePaymentIntentRequest:
    properties:
      id:
        type: string
    type: object
  controller.InterestPatchInput:
    properties:
      name:
        type: string
    type: object
  controller.LogEntry:
    properties:
      bytes_in:
        type: integer
      bytes_out:
        type: integer
      error:
        type: string
      event:
        type: string
      host:
        type: string
      id:
        type: string
      latency:
        type: integer
      latency_human:
        type: string
      level:
        type: string
      message:
        type: string
      method:
        type: string
      prefix:
        type: string
      remote_ip:
        type: string
      status:
        type: integer
      time:
        type: string
      uri:
        type: string
      user_agent:
        type: string
      user_id:
        type: string
    type: object
  controller.Message:
    properties:
      concertId:
        type: string
      isFirstMessage:
        type: boolean
      position:
        type: integer
      status:
        type: string
    type: object
  controller.RegisterRequest:
    properties:
      email:
        type: string
      firstname:
        type: string
      image:
        type: string
      lastname:
        type: string
      password:
        type: string
    type: object
  controller.RequestPayload:
    properties:
      email:
        type: string
      firstname:
        type: string
      image:
        type: string
      lastname:
        type: string
      orgadescri:
        type: string
      organization:
        type: string
      password:
        type: string
    type: object
  controller.TicketPatchInput:
    properties:
      concert_category_id:
        type: string
      ticketListings:
        items:
          $ref: '#/definitions/models.TicketListing'
        type: array
      user_id:
        type: string
    type: object
  models.Artist:
    properties:
      concerts:
        items:
          $ref: '#/definitions/models.Concert'
        type: array
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        description: gorm.Model
        type: string
      interest:
        $ref: '#/definitions/models.Interest'
      interestId:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  models.Category:
    properties:
      concertCategories:
        items:
          $ref: '#/definitions/models.ConcertCategory'
        type: array
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        description: gorm.Model
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  models.Concert:
    properties:
      artist:
        $ref: '#/definitions/models.Artist'
      artistId:
        type: string
      concertCategories:
        items:
          $ref: '#/definitions/models.ConcertCategory'
        type: array
      createdAt:
        type: string
      date:
        type: string
      deletedAt:
        type: string
      description:
        type: string
      id:
        description: gorm.Model
        type: string
      image:
        type: string
      interests:
        items:
          $ref: '#/definitions/models.Interest'
        type: array
      location:
        type: string
      name:
        type: string
      organization:
        $ref: '#/definitions/models.Organization'
      organizationId:
        type: string
      updatedAt:
        type: string
    type: object
  models.ConcertCategory:
    properties:
      availableTickets:
        type: integer
      category:
        $ref: '#/definitions/models.Category'
      categoryId:
        type: integer
      concert:
        allOf:
        - $ref: '#/definitions/models.Concert'
        description: Tickets          []Ticket `gorm:"-"`
      concertId:
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        description: gorm.Model
        type: string
      price:
        type: number
      soldTickets:
        type: integer
      tickets:
        items:
          $ref: '#/definitions/models.Ticket'
        type: array
      updatedAt:
        type: string
    type: object
  models.Conversation:
    properties:
      buyer:
        $ref: '#/definitions/models.User'
      buyerId:
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        description: gorm.Model
        type: string
      messages:
        items:
          $ref: '#/definitions/models.Message'
        type: array
      price:
        type: number
      seller:
        $ref: '#/definitions/models.User'
      sellerId:
        type: string
      ticketListing:
        $ref: '#/definitions/models.TicketListing'
      ticketListingId:
        type: string
      updatedAt:
        type: string
    type: object
  models.Interest:
    properties:
      concerts:
        items:
          $ref: '#/definitions/models.Concert'
        type: array
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        description: gorm.Model
        type: integer
      name:
        type: string
      updatedAt:
        type: string
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.Message:
    properties:
      author:
        $ref: '#/definitions/models.User'
      authorId:
        type: string
      content:
        type: string
      conversation:
        $ref: '#/definitions/models.Conversation'
      conversationId:
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        description: gorm.Model
        type: string
      readed:
        type: boolean
      sentAt:
        type: string
      updatedAt:
        type: string
    type: object
  models.Organization:
    properties:
      concerts:
        items:
          $ref: '#/definitions/models.Concert'
        type: array
      createdAt:
        type: string
      deletedAt:
        type: string
      description:
        type: string
      id:
        description: gorm.Model
        type: string
      image:
        type: string
      name:
        type: string
      updatedAt:
        type: string
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.Sale:
    properties:
      buyer:
        $ref: '#/definitions/models.User'
      buyerId:
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      finalPrice:
        type: number
      id:
        description: gorm.Model
        type: string
      seller:
        $ref: '#/definitions/models.User'
      sellerId:
        type: string
      ticketListingId:
        type: string
      ticketSold:
        $ref: '#/definitions/models.TicketListing'
      updatedAt:
        type: string
    type: object
  models.Ticket:
    properties:
      concertCategory:
        $ref: '#/definitions/models.ConcertCategory'
      concertCategoryId:
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        description: gorm.Model
        type: string
      maxPrice:
        type: number
      ticketListings:
        items:
          $ref: '#/definitions/models.TicketListing'
        type: array
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userId:
        type: string
    type: object
  models.TicketListing:
    properties:
      conversations:
        items:
          $ref: '#/definitions/models.Conversation'
        type: array
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        description: |-
          gorm.Model
          ID            uuid.UUID       `gorm:"unique;type:uuid;primaryKey;default:uuid_generate_v4()" json:"id"`
          Price         float64         `gorm:"not null" json:"price"`
          Status        string          `gorm:"not null" json:"status"`
          CreatedAt     time.Time       `json:"createdAt"`
          UpdatedAt     time.Time       `json:"updatedAt"`
          DeletedAt     *time.Time      `gorm:"index"`
          TicketId      uuid.UUID       `gorm:"not null" json:"ticketId"`
        type: string
      price:
        type: number
      sale:
        $ref: '#/definitions/models.Sale'
      status:
        type: string
      ticket:
        $ref: '#/definitions/models.Ticket'
      ticketId:
        type: string
      updatedAt:
        type: string
    type: object
  models.User:
    properties:
      conversationsAsBuyer:
        items:
          $ref: '#/definitions/models.Conversation'
        type: array
      conversationsAsSeller:
        items:
          $ref: '#/definitions/models.Conversation'
        type: array
      createdAt:
        type: string
      deletedAt:
        type: string
      email:
        description: |-
          l'email de l'utilisateur

          required: true
          example: john@doe.com
        type: string
      firstname:
        description: |-
          le pr√©nom de l'utilisateur

          required: true
          example: John
        type: string
      id:
        description: |-
          gorm.Model
          l'ID de l'utilisateur

          required: true
          example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      image:
        type: string
      interests:
        items:
          $ref: '#/definitions/models.Interest'
        type: array
      lastConnexion:
        type: string
      lastname:
        description: |-
          le nom de l'utilisateur

          required: true
          example: Doe
        type: string
      messages:
        items:
          $ref: '#/definitions/models.Message'
        type: array
      organization:
        $ref: '#/definitions/models.Organization'
      organizationId:
        type: string
      resetCodeExpiration:
        type: string
      role:
        type: string
      salesAsBuyer:
        items:
          $ref: '#/definitions/models.Sale'
        type: array
      salesAsSeller:
        items:
          $ref: '#/definitions/models.Sale'
        type: array
      tickets:
        items:
          $ref: '#/definitions/models.Ticket'
        type: array
      updatedAt:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is the swagger documentation for the Weezemaster API.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Weezemaster API
  version: "1.0"
paths:
  /artists:
    get:
      description: R√©cup√®re tous les artistes
      operationId: get-all-artists
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Artist'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: R√©cup√®re tous les artistes
      tags:
      - Artists
    post:
      description: Cr√©√© un artiste
      operationId: create-artist
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/models.Artist'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Cr√©√© un artiste
      tags:
      - Artists
  /artists/{id}:
    delete:
      description: Supprime un artiste par ID
      operationId: delete-artist
      parameters:
      - description: ID de l'artiste
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/models.Artist'
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Supprime un artiste
      tags:
      - Artists
    get:
      description: R√©cup√®re un artiste par ID
      operationId: get-artist
      parameters:
      - description: ID de l'artiste
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Artist'
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: R√©cup√®re un artiste
      tags:
      - Artists
    patch:
      description: Met √† jour un artiste par ID
      operationId: update-artist
      parameters:
      - description: ID de l'artiste
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Nom de l'artiste
        in: body
        name: artist
        required: true
        schema:
          $ref: '#/definitions/controller.ArtistPatchInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Artist'
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Met √† jour un artiste
      tags:
      - Artists
  /categories:
    get:
      description: R√©cup√®re toutes les cat√©gories
      operationId: get-all-categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: R√©cup√®re toutes les cat√©gories
      tags:
      - Categories
    post:
      description: Cr√©√© une cat√©gorie
      operationId: create-category
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Cr√©√© une cat√©gorie
      tags:
      - Categories
  /categories/{id}:
    delete:
      description: Supprime une cat√©gorie par ID
      operationId: delete-category
      parameters:
      - description: ID de la cat√©gorie
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Supprime une cat√©gorie
      tags:
      - Categories
    get:
      description: R√©cup√®re une cat√©gorie par ID
      operationId: get-category
      parameters:
      - description: ID de la cat√©gorie
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: R√©cup√®re une cat√©gorie
      tags:
      - Categories
    patch:
      description: Modifie une cat√©gorie par ID
      operationId: update-category
      parameters:
      - description: ID de la cat√©gorie
        in: path
        name: id
        required: true
        type: integer
      - description: Nom de la cat√©gorie
        in: body
        name: name
        required: true
        schema:
          $ref: '#/definitions/controller.CategoryPatchInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "422":
          description: Unprocessable Entity
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Modifie une cat√©gorie
      tags:
      - Categories
  /concerts:
    get:
      description: R√©cup√®re tous les concerts
      operationId: get-all-concerts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Concert'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: R√©cup√®re tous les concerts
      tags:
      - Concerts
    post:
      description: Cr√©√© un concert
      operationId: create-concert
      parameters:
      - description: Nom du concert
        in: formData
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Concert'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Cr√©√© un concert
      tags:
      - Concerts
  /concerts/{id}:
    delete:
      description: Supprime un concert par ID
      operationId: delete-concert
      parameters:
      - description: ID du concert
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Supprime un concert
      tags:
      - Concerts
    get:
      description: R√©cup√®re un concert par ID
      operationId: get-concert
      parameters:
      - description: ID du concert
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Concert'
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: R√©cup√®re un concert
      tags:
      - Concerts
    patch:
      description: Modifie un concert par ID
      operationId: update-concert
      parameters:
      - description: ID du concert
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Nom du concert
        in: formData
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Concert'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Modifie un concert
      tags:
      - Concerts
  /concerts/artist/{id}:
    get:
      description: R√©cup√®re les concerts par ID d'artiste
      operationId: get-concerts-by-artist-id
      parameters:
      - description: ID de l'artiste
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Concert'
            type: array
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: R√©cup√®re les concerts par ID d'artiste
      tags:
      - Concerts
  /config/{key}:
    get:
      description: R√©cup√©rer la valeur d'une configuration
      operationId: get-config
      parameters:
      - description: Cl√© de la configuration
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: default
        "404":
          description: default
        "500":
          description: default
      security:
      - Bearer: []
      summary: R√©cup√©rer la valeur d'une configuration
      tags:
      - Configurations
    patch:
      consumes:
      - application/json
      description: Mettre √† jour la valeur d'une configuration
      operationId: update-config
      parameters:
      - description: Cl√© de la configuration
        in: path
        name: key
        required: true
        type: string
      - description: Valeur de la configuration
        in: body
        name: value
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: default
        "500":
          description: default
      security:
      - Bearer: []
      summary: Mettre √† jour la valeur d'une configuration
      tags:
      - Configurations
  /conversations:
    post:
      consumes:
      - application/json
      description: Cr√©√© une conversation
      operationId: create-conversation
      parameters:
      - description: Conversation √† cr√©er
        in: body
        name: conversation
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Conversation'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Cr√©√© une conversation
      tags:
      - Conversations
  /conversations/{id}:
    get:
      description: R√©cup√®re une conversation par ID
      operationId: get-conversation
      parameters:
      - description: ID de la conversation
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Conversation'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: R√©cup√®re une conversation
      tags:
      - Conversations
    patch:
      consumes:
      - application/json
      description: Met √† jour une conversation
      operationId: update-conversation
      parameters:
      - description: ID de la conversation
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Price
        in: body
        name: conversation
        required: true
        schema:
          type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Conversation'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Met √† jour une conversation
      tags:
      - Conversations
  /conversations/check:
    get:
      consumes:
      - application/json
      description: V√©rifie si une conversation existe
      operationId: check-conversation
      parameters:
      - in: query
        name: buyer_id
        type: string
      - in: query
        name: ticket_listing_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ID" "ID de la conversation
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: V√©rifie si une conversation existe
      tags:
      - Conversations
  /create-payment-intent:
    post:
      consumes:
      - application/json
      description: Create a payment intent
      operationId: create-payment-intent
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.CreatePaymentIntentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Create a payment intent
      tags:
      - Payment
  /forgot-password:
    post:
      description: Envoie un email de r√©initialisation de mot de passe
      operationId: forgot-password
      parameters:
      - description: Email de l'utilisateur
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Envoie un email de r√©initialisation de mot de passe
      tags:
      - Users
  /interests:
    get:
      description: R√©cup√®re tous les centres d'int√©r√™ts
      operationId: get-all-interests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Interest'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: R√©cup√®re tous les centres d'int√©r√™ts
      tags:
      - Interests
    post:
      description: Cr√©√© un centre d'int√©r√™t
      operationId: create-interest
      parameters:
      - description: Centre d'int√©r√™t √† cr√©er
        in: body
        name: interest
        required: true
        schema:
          $ref: '#/definitions/models.Interest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/models.Interest'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Cr√©√© un centre d'int√©r√™t
      tags:
      - Interests
  /interests/{id}:
    delete:
      description: Supprime un centre d'int√©r√™t par ID
      operationId: delete-interest
      parameters:
      - description: ID du centre d'int√©r√™t
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Supprime un centre d'int√©r√™t
      tags:
      - Interests
    get:
      description: R√©cup√®re un centre d'int√©r√™t par ID
      operationId: get-interest
      parameters:
      - description: ID du centre d'int√©r√™t
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Interest'
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: R√©cup√®re un centre d'int√©r√™t
      tags:
      - Interests
    patch:
      description: Modifie un centre d'int√©r√™t par ID
      operationId: update-interest
      parameters:
      - description: ID du centre d'int√©r√™t
        in: path
        name: id
        required: true
        type: integer
      - description: Centre d'int√©r√™t √† modifier
        in: body
        name: interest
        required: true
        schema:
          $ref: '#/definitions/controller.InterestPatchInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Interest'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Modifie un centre d'int√©r√™t
      tags:
      - Interests
  /login:
    post:
      description: Se connecter avec un email et un mot de passe
      operationId: login
      parameters:
      - description: Email de l'utilisateur
        in: query
        name: email
        required: true
        type: string
      - description: Mot de passe de l'utilisateur
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: "OK\"\t{ \"access_token\": \"token\", \"refresh_token\": \"token\"
            }"
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Se connecter
      tags:
      - Users
  /logs:
    get:
      description: R√©cup√©rer les logs
      operationId: get-logs
      parameters:
      - description: 'Date des logs (format: 2006-01-02)'
        in: query
        name: date
        type: string
      - description: Type d'√©v√©nement √† filtrer
        in: query
        name: event
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controller.LogEntry'
            type: array
        "400":
          description: default
        "500":
          description: default
      security:
      - Bearer: []
      summary: R√©cup√©rer les logs
      tags:
      - Logs
  /messages:
    post:
      description: Cr√©er un message
      operationId: post-message
      parameters:
      - description: Contenu du message
        in: body
        name: content
        required: true
        schema:
          type: string
      - description: Message
        format: uuid
        in: body
        name: conversation_id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Cr√©er un message
      tags:
      - Messages
  /organization/concerts:
    get:
      description: R√©cup√®re les concerts par ID d'organisation
      operationId: get-concerts-by-organization-id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Concert'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: R√©cup√®re les concerts par ID d'organisation
      tags:
      - Concerts
  /refresh:
    post:
      description: R√©cup√®re un nouvel access token √† partir d'un refresh token
      operationId: refresh-user
      parameters:
      - description: Refresh token
        in: body
        name: refresh_token
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: R√©cup√®re un nouvel access token
      tags:
      - Users
  /register:
    post:
      description: Cr√©√© un utilisateur
      operationId: create-user
      parameters:
      - description: Requ√™te de cr√©ation d'utilisateur
        in: body
        name: formData
        required: true
        schema:
          $ref: '#/definitions/controller.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: "OK\"\t\"example\":\t{ \"ID\": \"uuid\", \"email\": \"user@example.com\",
            \"firstname\": \"John\", \"lastname\": \"Doe\", \"role\": \"user\", \"image\":
            \"image.jpg\" }"
          schema:
            additionalProperties: true
            type: object
        "422":
          description: Unprocessable Entity
          schema: {}
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Cr√©√© un utilisateur
      tags:
      - Users
  /registerorganizer:
    post:
      description: Cr√©√© une organisation et son utilisateur
      operationId: create-organization-user
      parameters:
      - description: Requ√™te de cr√©ation d'organisation et d'utilisateur
        in: body
        name: formData
        required: true
        schema:
          $ref: '#/definitions/controller.RequestPayload'
      produces:
      - application/json
      responses:
        "201":
          description: "OK\"\t{ \"organization\": { \"ID\": \"uuid\", \"name\": \"Organization\",
            \"description\": \"Organization description\" }, \"user\": {\"ID\": \"uuid\",
            \"email\": \"user@example.com\", \"firstname\": \"John\", \"lastname\":
            \"Doe\", \"role\": \"organizer\", \"image\": \"image.jpg\" } }"
          schema:
            additionalProperties:
              type: string
            type: object
        "422":
          description: Unprocessable Entity
          schema: {}
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Cr√©√© une organisation et son utilisateur
      tags:
      - Organization
  /reservation:
    post:
      consumes:
      - application/json
      description: Create a reservation for a concert category
      operationId: create-reservation
      parameters:
      - description: Id de la cat√©gorie de concert
        format: uuid
        in: body
        name: body
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Ticket'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Create a reservation
      tags:
      - Reservation
  /reset-password:
    post:
      description: R√©initialise le mot de passe avec un code de r√©initialisation
      operationId: reset-password
      parameters:
      - description: Code de r√©initialisation
        in: query
        name: reset_code
        required: true
        type: string
      - description: Nouveau mot de passe
        in: query
        name: new_password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: R√©initialise le mot de passe
      tags:
      - Users
  /ticket_listing_reservation/{id}:
    post:
      consumes:
      - application/json
      description: Create a reservation for a ticket listing
      operationId: create-ticket-listing-reservation
      parameters:
      - description: Ticket listing ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Id du ticket listing
        format: uuid
        in: body
        name: body
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Sale'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Create a ticket listing reservation
      tags:
      - Reservation
  /ticket_listing_reservation_conversation/{id}:
    post:
      consumes:
      - application/json
      description: Create a reservation for a ticket listing from a conversation
      operationId: create-ticket-listing-reservation-from-conversation
      parameters:
      - description: Conversation ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: id de la conversation
        format: uuid
        in: body
        name: body
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Sale'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Create a ticket listing reservation from conversation
      tags:
      - Reservation
  /ticketlistings:
    get:
      consumes:
      - application/json
      description: Get all ticket listings
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TicketListing'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Get all ticket listings
      tags:
      - Ticket listing
    post:
      consumes:
      - application/json
      description: Create ticket listings
      parameters:
      - description: Ticket ID
        in: body
        name: ticketId
        required: true
        schema:
          type: string
      - description: Price
        in: body
        name: price
        required: true
        schema:
          type: number
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.TicketListing'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Create ticket listings
      tags:
      - Ticket listing
  /ticketlistings/{id}:
    delete:
      consumes:
      - application/json
      description: Delete ticket listing
      parameters:
      - description: TicketListing ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Delete ticket listing
      tags:
      - Ticket listing
    get:
      consumes:
      - application/json
      description: Get ticket listing by ID
      parameters:
      - description: TicketListing ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TicketListing'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Get ticket listing by ID
      tags:
      - Ticket listing
    patch:
      consumes:
      - application/json
      description: Update ticket listing
      parameters:
      - description: TicketListing ID
        in: path
        name: id
        required: true
        type: string
      - description: Price
        in: body
        name: price
        schema:
          type: number
      - description: Status
        in: body
        name: status
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TicketListing'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Update ticket listing
      tags:
      - Ticket listing
  /ticketlistings/concert/{id}:
    get:
      consumes:
      - application/json
      description: Get ticket listing by concert ID
      parameters:
      - description: Concert ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TicketListing'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Get ticket listing by concert ID
      tags:
      - Ticket listing
  /tickets:
    get:
      description: R√©cup√®re tous les tickets
      operationId: get-all-tickets
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Ticket'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: R√©cup√®re tous les tickets
      tags:
      - Tickets
    post:
      description: Cr√©√© un ticket
      operationId: create-ticket
      parameters:
      - description: Ticket √† cr√©er
        in: body
        name: ticket
        required: true
        schema:
          $ref: '#/definitions/models.Ticket'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Ticket'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Cr√©√© un ticket
      tags:
      - Tickets
  /tickets/{id}:
    delete:
      description: Supprime un ticket par ID
      operationId: delete-ticket
      parameters:
      - description: ID du ticket
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/models.Ticket'
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Supprime un ticket
      tags:
      - Tickets
    get:
      description: R√©cup√®re un ticket par ID
      operationId: get-ticket
      parameters:
      - description: ID du ticket
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Ticket'
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: R√©cup√®re un ticket
      tags:
      - Tickets
    patch:
      description: Modifie un ticket par ID
      operationId: update-ticket
      parameters:
      - description: ID du ticket
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Champs √† modifier
        in: body
        name: ticket
        required: true
        schema:
          $ref: '#/definitions/controller.TicketPatchInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Ticket'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Modifie un ticket
      tags:
      - Tickets
  /tickets/mytickets:
    get:
      description: R√©cup√®re les tickets d'un utilisateur
      operationId: get-user-tickets
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Ticket'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: R√©cup√®re les tickets d'un utilisateur
      tags:
      - Tickets
  /user/interests:
    get:
      description: R√©cup√®re les centres d'int√©r√™t de l'utilisateur
      operationId: get-user-interests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Interest'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: R√©cup√®re les centres d'int√©r√™t de l'utilisateur
      tags:
      - Interests
  /user/interests/{id}:
    delete:
      description: Supprime un centre d'int√©r√™t de l'utilisateur
      operationId: remove-user-interest
      parameters:
      - description: ID du centre d'int√©r√™t
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Supprime un centre d'int√©r√™t de l'utilisateur
      tags:
      - Interests
    post:
      description: Ajoute un centre d'int√©r√™t √† l'utilisateur
      operationId: add-user-interest
      parameters:
      - description: ID du centre d'int√©r√™t
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Interest'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Ajoute un centre d'int√©r√™t √† l'utilisateur
      tags:
      - Interests
  /users:
    get:
      description: R√©cup√®re tous les utilisateurs
      operationId: get-all-users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - Bearer: []
      summary: R√©cup√®re tous les utilisateurs
      tags:
      - Users
  /users/{id}:
    delete:
      description: Supprime un utilisateur par ID
      operationId: delete-user
      parameters:
      - description: ID de l'utilisateur
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Supprime un utilisateur
      tags:
      - Users
    get:
      description: R√©cup√®re un utilisateur par ID
      operationId: get-user
      parameters:
      - description: ID de l'utilisateur
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: R√©cup√®re un utilisateur
      tags:
      - Users
    patch:
      description: Modifie un utilisateur par ID
      operationId: update-user
      parameters:
      - description: ID de l'utilisateur
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Requ√™te de modification d'utilisateur
        in: body
        name: formData
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Modifie un utilisateur
      tags:
      - Users
  /ws-chat:
    get:
      consumes:
      - application/json
      description: G√®re les connexions WebSocket pour le chat entre les utilisateurs
      operationId: handle-websocket-chat
      responses:
        "101":
          description: Switching Protocols
          schema:
            type: string
      summary: G√©rer les connexions WebSocket pour le chat
      tags:
      - WebSockets
  /ws-community:
    get:
      consumes:
      - application/json
      description: G√®re les connexions WebSocket pour les chats des artistes
      operationId: websocket-community
      parameters:
      - description: ID de l'artiste
        format: uuid
        in: query
        name: artistId
        required: true
        type: string
      responses:
        "101":
          description: Switching Protocols
          schema:
            type: string
      summary: G√®re les connexions WebSocket pour les chats des artistes
      tags:
      - WebSockets
  /ws-queue:
    get:
      description: G√®re les connexions WebSocket pour la file d'attente des concerts
      operationId: handle-websocket-queue
      parameters:
      - description: ID du concert
        format: uuid
        in: query
        name: concertId
        required: true
        type: string
      - description: ID de l'utilisateur
        format: uuid
        in: query
        name: userId
        required: true
        type: string
      responses:
        "101":
          description: Switching Protocols
          schema:
            $ref: '#/definitions/controller.Message'
      summary: G√®re les connexions WebSocket pour la file d'attente des concerts
      tags:
      - WebSockets
securityDefinitions:
  Bearer:
    description: 'Provide your JWT token in the format: Bearer {token}'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
